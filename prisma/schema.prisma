// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id        String   @id @default(uuid())
  userName  String   @unique
  password  String
  role      role     @default(customer)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  shop     shop[]
  cart     cart[]
  checkout checkout[]
}

model shop {
  id        String   @id @default(uuid())
  shopName  String   @unique
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   user?   @relation(fields: [userId], references: [id])
  userId String?

  item     item[]
  checkout checkout[]
}

model category {
  id           String   @id @default(uuid())
  categoryName String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  item item[]
}

model item {
  id          String   @id @default(uuid())
  itemName    String   @unique
  description String
  image       String
  price       Float
  stock       Int
  isDeleted   Int @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  cart     cart[]
  checkout checkout[]

  category   category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  shop   shop?   @relation(fields: [shopId], references: [id])
  shopId String?
}

model cart {
  id         String   @id @default(uuid())
  cartAmount Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  item   item?   @relation(fields: [itemId], references: [id])
  itemId String?

  user   user?   @relation(fields: [userId], references: [id])
  userId String?
}

model checkout {
  id          String   @id @default(uuid())
  checkAmount Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  item   item?   @relation(fields: [itemId], references: [id])
  itemId String?
  user   user?   @relation(fields: [userId], references: [id])
  userId String?
  shop   shop?   @relation(fields: [shopId], references: [id])
  shopId String?
}

enum role {
  customer
  seller
}
